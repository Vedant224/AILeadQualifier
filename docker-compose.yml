# Docker Compose configuration for Lead Scoring Backend API
# Provides complete development and production environment setup

version: '3.8'

services:
  # Main application service
  lead-scoring-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: lead-scoring-backend
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - MAX_LEADS_PER_UPLOAD=${MAX_LEADS_PER_UPLOAD:-1000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
    volumes:
      # Mount for temporary file uploads
      - uploads:/tmp/uploads
      # Mount for logs (optional)
      - logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health/live', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lead-scoring-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lead-scoring.rule=Host(`api.leadscoring.local`)"
      - "traefik.http.services.lead-scoring.loadbalancer.server.port=3000"

  # Development service (for local development)
  lead-scoring-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: lead-scoring-dev
    ports:
      - "${DEV_PORT:-3001}:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LOG_LEVEL=debug
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/node_modules
      - uploads:/tmp/uploads
    command: npm run dev
    networks:
      - lead-scoring-network
    profiles:
      - dev

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: lead-scoring-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - lead-scoring-api
    networks:
      - lead-scoring-network
    profiles:
      - proxy

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: lead-scoring-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - lead-scoring-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: lead-scoring-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - lead-scoring-network
    profiles:
      - monitoring

# Named volumes
volumes:
  uploads:
    driver: local
  logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Networks
networks:
  lead-scoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16